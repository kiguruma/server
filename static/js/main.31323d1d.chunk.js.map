{"version":3,"sources":["Title.js","Form.js","Item.js","List.js","AllDone.js","App.js","index.js"],"names":["Title","className","Form","addTodo","isEditing","setIsEditing","editDone","createEditTodo","useState","value","setValue","editValue","setEditValue","onSubmit","e","preventDefault","type","onChange","target","Listwrap","styled","li","LeftContents","a","RightContents","Check","input","EditButton","button","DeleteButton","Item","content","id","removeTodo","allDone","toggleIsEditting","React","isDone","setIsDone","doneLine","textDecorationLine","style","onClick","ItemWrap","ul","List","todos","map","todo","console","log","key","AllDone","Label","label","App","setTodos","editTodo","setEditTodo","useEffect","axios","get","then","res","data","put","status","filter","index","FormProps","newTodo","post","concat","ListProps","delete","catch","err","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31323d1d.chunk.js","sourcesContent":["import React from 'react'\nimport './main.css'\n// import { useState } from 'react'\n\n// const titleStyle = {color: 'red', fontSize:100}\n\nconst Title = () => {\n\n    // const [blue, setBlue] = useState(false)\n\n    return (\n        <h1 className={'title'} \n            // onClick={() => setBlue(!blue)}\n        >TodoApp</h1>\n    )\n}\n\nexport default Title","import React, {useState} from 'react'\nimport './main.css'\n\nconst Form = ({\n    addTodo,\n    isEditing, \n    setIsEditing,\n    editDone,\n    createEditTodo}) => {\n\n    const [value, setValue] = useState(``)\n\n    const [editValue, setEditValue] = useState('')\n\n    //リストを追加\n    const hundleSubmit = (e) => {\n        e.preventDefault()\n        addTodo(value)\n        setValue('')\n    }\n\n    //リストを編集\n    const hundleEditSubmit = (e) => {\n        e.preventDefault()\n        createEditTodo(editValue)\n        editDone(editValue)\n        setIsEditing(!isEditing)\n        setEditValue('')\n    }\n\n    return (\n    <form \n        className='form' \n        onSubmit={\n            isEditing ?\n            hundleEditSubmit:\n            hundleSubmit\n        }\n    >\n        <input  \n            className='input' \n            type=\"text\" \n            onChange = {\n                isEditing ?\n                (e) => {setEditValue(e.target.value)}:\n                (e) => {setValue(e.target.value)}\n            }\n            value = {\n                isEditing ?\n                editValue:\n                value\n            }\n        />\n        <button className='addInput' type=\"submit\">\n        {\n        isEditing ?\n        'edit':\n        'add'\n        } \n        </button>\n    </form>\n    )\n}\n\nexport default Form","import React from 'react'\nimport styled from 'styled-components'\n\nconst Item = ({content, id,removeTodo,createEditTodo,isEditing, setIsEditing,allDone,toggleIsEditting}) => {\n\n    //React.useStateを実行すると\n    //最新の状態の値\n    const [isDone, setIsDone] = React.useState(false)\n\n    const doneLine = isDone ?\n                            {textDecorationLine: 'line-through'}:\n                            null\n\n    const removeclick = () => {\n        removeTodo(id)\n    }\n\n    const editClick = () => {\n        toggleIsEditting()\n        createEditTodo({}, id)\n    }\n\n    const hundleChangeDone = () => {\n        setIsDone(!isDone)\n        allDone(!isDone)\n    }\n\n                            \n    return (\n        <Listwrap>\n            <LeftContents>\n            <Check type=\"checkbox\" onChange={hundleChangeDone} />\n            <span style={doneLine}>{`${id}: ${content}`}</span>\n            </LeftContents>\n            <RightContents>\n            <EditButton \n            onClick={editClick}\n            >edit</EditButton>\n            <DeleteButton onClick={removeclick}>delete</DeleteButton>\n            </RightContents>\n        </Listwrap>\n    )\n}\n\nconst Listwrap = styled.li`\n    display: flex;\n    margin-bottom: 30px;\n    justify-content:space-between;\n    color: red;\n    &:not(:last-child) {\n        margin-bottom: 15px;\n    }\n`\nconst LeftContents = styled.a`\n    display: inline-block\n`\n\nconst RightContents = styled.a`\n    display: inline-block\n`\n\nconst Check = styled.input`\n    \n`\n\nconst EditButton = styled.button`\n    color: white;\n    background-color: #66FF00; \n    margin-right:5px;\n    border-radius:10px;\n`\n\nconst DeleteButton = styled.button`\n    color: white;\n    background-color: red;\n    border-radius:10px;\n`\n\n\n\nexport default Item","import React from 'react'\nimport Item from './Item'\nimport styled from 'styled-components'\n\nconst List = ({\n    todos,\n    removeTodo,\n    isEditing, \n    setIsEditing,\n    createEditTodo,\n    toggleIsEditting,\n    allDone}) => {\n\n\n\n    return (  \n        <ItemWrap>\n            {\n                todos.map(todo => {\n                    console.log(todo)\n                    return(\n                        <Item \n                        content={todo.content}\n                        id={todo.id}\n                        key={todo.id}\n                        toggleIsEditting={toggleIsEditting}\n                        removeTodo={removeTodo}\n                        createEditTodo={createEditTodo}\n                        isEditing={isEditing}\n                        setIsEditing={setIsEditing}\n                        allDone={allDone}\n                        />\n                    )\n\n                })\n            }\n        </ItemWrap>\n    )\n}\n\nconst ItemWrap = styled.ul`\n    list-style: none;\n    width:80%;\n    padding: 0px;\n    margin: 0 auto;\n`\n\n\nexport default List","import React, {useState} from 'react'\nimport styled from 'styled-components'\n\nconst AllDone = (allDone) => {\n\n    return (\n        <Label>\n            <input \n            type=\"checkbox\"\n            />\n            全て{allDone? \"未完了\": \"完了\"}にする\n        </Label>\n    )\n}\n\nexport default AllDone\n\nconst Label = styled.label`\nmargin-left: 20px;\n`\n\n","import React, {useState,useEffect} from 'react'\nimport Title from './Title'\nimport Form from './Form'\nimport List from './List'\nimport AllDone from './AllDone'\nimport './main.css'\n\nimport axios from 'axios'\n\nconst App = () => {\n\n    const [todos, setTodos] = useState([])\n\n    const [editTodo, setEditTodo] = useState({})\n\n    \n    const [isEditing, setIsEditing] =React.useState(false)\n\n    useEffect(() => {\n        //レンダー後に実行される\n        axios.get('http://localhost:3001/todos')\n        .then(res => {\n            //todosにgetしたら/todosに入ってるresponse(データ)が帰ってきて\n            //setTodosした\n            setTodos(res.data)\n            //このres.dataの元はなに？\n            console.log(res)\n        })\n    }, [])\n    \n    //チェックボックス完了・未完了\n    // const [isDone, setIsDone] = React.useState(false)\n\n   //追加機能\n    const addTodo = (content) => {\n        //このcontentどっから来たの？＜＝form.jsのhundlesubmit。valueじゃなくていいの？app.jsのcontent?\n        const newTodo = {\n            content\n        }\n        \n        //3001にnewTODOを送った。その後newtodoはどこ行った？\n        axios.post('http://localhost:3001/todos',newTodo)\n        .then(res => {\n            //帰って来たres.dataをtodosに繋げた\n            setTodos(todos.concat(res.data))\n            //このres.dataは全てのdataを含んでいるのでは？二重になってる\n        })\n    }\n\n    //削除機能\n    const removeTodo = (id) => {\n        axios.delete(`http://localhost:3001/todos/${id}`)\n        //ここから下なくても機能する\n        //ブラウザが反映されるには？\n        .then(res => {\n            if (res.status === 204) {\n                setTodos(todos.filter(todo => todo.id !== id))\n            }\n        })\n        .catch(err => {\n            console.log(err)\n        })\n        // setTodos(\n        //     todos.filter( function( value,index ) {\n        //         if ( index !== id)\n        //         return value \n        // })\n        // )\n    }\n\n    //編集機能\n\n     const toggleIsEditting =() => {\n         setIsEditing(!isEditing)\n     }\n\n\n    const createEditTodo = ( content,id) => {\n\n        // console.log(id)\n\n        // console.log(content)\n\n        const todo = { content }\n\n        axios.put(`http://localhost:3001/todos/${id}`, todo)\n        \n        .then(res => {\n            console.log(res.status)\n        })\n\n\n        // setEditTodo({\n        //     content: content,\n        //     id: id\n        // })\n        }  \n\n    //全て完了状態かどうか調べる\n    const allDone = (isDone) => {\n        todos.filter( function() {\n            return isDone === true\n            \n        })\n        // console.log(id,isDone)\n    }\n    \n    const editDone = (editValue) => {\n        editTodo.content = editValue\n        setTodos(\n            todos.map((value,index) => {\n                if ( index === editTodo.id) {\n                    return value = editTodo.content\n                } else {\n                    return value\n                }\n        })\n        )\n    }\n\n    const FormProps = {\n        createEditTodo,\n        addTodo,\n        editTodo,\n        setEditTodo,\n        isEditing,\n        setIsEditing,\n        editDone,\n        editTodo\n    }\n\n    const ListProps = {\n        todos,\n        removeTodo,\n        createEditTodo,\n        isEditing,\n        setIsEditing,\n        toggleIsEditting,\n        editDone,\n        allDone\n    }\n\n    return (\n        <div className='app'>\n            <Title />\n            <Form {...FormProps}/>\n            <AllDone allDone={allDone}/>\n            <List {...ListProps}/>\n        </div>\n    )\n} \n\nexport default App","import ReactDOM from 'react-dom'\nimport React from 'react'\nimport App from './App'\n\n\nReactDOM.render(\n    //jsx記法\n    // <h1>Hello,World</h1>,\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}